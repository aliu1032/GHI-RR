select(test_criteria)
head(temp)
head(temptemp)
names(PTC)
col_temp <- names(PTC)[1:14]
col_temp
temptemp <- temp2_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
head(temptemp)
temp2_PTC <- PTC
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[Criteria_Enum$SFDC_API_Name==test_criteria[j],'Criteria_Enum'])
temptemp <- temp2_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
temptemp[new_col] <- lapply(temptemp[test_criteria[j]], function(input) grepl(test_criteria_selection[k], input))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt")
write.table(paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
temp2_PTC <- PTC
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[Criteria_Enum$SFDC_API_Name==test_criteria[j],'Criteria_Enum'])
temptemp <- temp2_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
temptemp[new_col] <- lapply(temptemp[test_criteria[j]], function(input) grepl(test_criteria_selection[k], input))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt",sep="")
write.table(temptemp, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
temp2_PTC <- PTC
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
temptemp <- temp2_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[Criteria_Enum$SFDC_API_Name==test_criteria[j],'Criteria_Enum'])
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
temptemp[new_col] <- lapply(temptemp[test_criteria[j]], function(input) grepl(test_criteria_selection[k], input))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt",sep="")
write.table(temptemp, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
rm(temptemp)
rm(temp2_PTC)
test_criteria_selection[k]
i
i = 3
unique_test[i]
i = 4
unique_test[i]
knitr::opts_chunk$set(echo = TRUE)
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
test_criteria
test_criteria_selection <- unique(Criteria_Enum[Criteria_Enum$SFDC_API_Name==test_criteria[j],'Criteria_Enum'])
test_criteria_selection
i
test_criteria
test_criteria_selection
View(Criteria_Enum)
test_criteria
test_criteria[j]
j = 1
test_criteria_selection <- unique(Criteria_Enum[Criteria_Enum$SFDC_API_Name==test_criteria[j],'Criteria_Enum'])
for (k in seq(1, length(test_criteria_selection))){
}
test_criteria_selection <- unique(Criteria_Enum[Criteria_Enum$SFDC_API_Name==test_criteria[j],'Criteria_Enum'])
test_criteria_selection
Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &&
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum']
i
unique_test[i]
test_criteria[j]
Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum']
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
test_criteria_selection
k
k = 1
grepl('$(?<=I)',test_criteria_selection[k])
(grepl("$(?<=I)",test_criteria_selection[k])
)
grepl("I",test_criteria_selection[k])
(grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE))
k = 2
(grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE))
k = 3
(grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE))
k = 2
search_pattern = paste(test_criteria_selection[k],"(?!I)",sep="")
search_pattern
PTC <- getPTC(DB_source_data, 1)
Criteria_Enum <- read.xlsx(paste(prep_file_path,'Criteria_Enum.xlsx',sep=''), sheetName ="ENUM", colIndex=c(1:3,5:6), stringsAsFactors=FALSE, header=TRUE)
temp_PTC <- PTC
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
temptemp <- temp_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
# Stage I is found for Stage II
# test pattern: if end of the string, positive look backward, it is end by letter I
# append the search pattern: (?!I) - negative look ahead, the string is not followed by I
if (grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE)){
search_pattern = paste(test_criteria_selection[k],"(?!I)",sep="")
} else {
search_pattern = test_criteria_selection[k]
}
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
temptemp[new_col] <- lapply(temptemp[test_criteria[j]], function(input) grepl(search_pattern, input, perl=TRUE))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt",sep="")
write.table(temptemp, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
i = 1
unique_test[i]
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
test_criteria
j =6
(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum']))
(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE
)
head(temptemp[test_criteria[j])
temptemp[test_criteria[j]
]
names(temptemp)
temptemp <- temp_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
names(temptemp)
head(temptemp[test_criteria[j]])
search_pattern
grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE)
search_pattern = test_criteria_selection[k]
search_pattern
search_pattern = test_criteria_selection[k]
test_criteria_selection[k]
j
k = 3
test_criteria_selection[k]
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
test_criteria_selection[k]
head(temptemp[test_criteria[j]])
temptemp[test_criteria[j]][3]
temptemp[test_criteria[j],3]
temptemp[test_criteria[j]]
temptemp[test_criteria[j]][3]
temptemp[3][test_criteria[j]]
temptemp[test_criteria[j][3]]
temptemp[test_criteria[j]][[3]]
temptemp[test_criteria[j]][3]
head(temptemp[test_criteria[j]])
temptemp[test_criteria[j]][3]
class(temptemp[test_criteria[j]])
class(temptemp[3,test_criteria[j]])
temptemp[3,test_criteria[j]]
grepl(search_pattern,temptemp[3,test_criteria[j]])
search_pattern
search_pattern = test_criteria_selection[k]
search_pattern
grepl(search_pattern,temptemp[3,test_criteria[j]])
search_pattern = "I"
grepl(search_pattern,temptemp[3,test_criteria[j]])
search_pattern = "II"
grepl(search_pattern,temptemp[3,test_criteria[j]])
search_pattern = "III"
grepl(search_pattern,temptemp[3,test_criteria[j]])
search_pattern = "IIIA \(T1-3, N1-2\)"
grepl(search_pattern,temptemp[3,test_criteria[j]],perl=TRUE)
search_pattern
search_pattern = "IIIA (T1-3, N1-2)"
grepl(search_pattern,temptemp[3,test_criteria[j]],perl=TRUE)
search_pattern = paste("IIIA ","\(","T1-3, N1-2","\)",sep="")
search_pattern = paste("IIIA ","\(","T1-3, N1-2","\)",sep="")
search_pattern = paste("IIIA ","\(","T1-3, N1-2",sep="")
search_pattern = "IIIA \\(T1-3, N1-2\\)"
search_pattern
grepl(search_pattern,temptemp[3,test_criteria[j]],perl=TRUE)
temptemp[3,test_criteria[j]]
temp <- test_criteria_selection[3]
temp
sub("(", "\\(", temp)
sub("\\(", "\\(", temp)
sub("\\(", "\\\\(", temp)
sub("\\)", "\\\\)", temp)
temp <- sub("\\(", "\\\\(", temp)
temp <- sub("\\)", "\\\\)", temp)
temp
PTC <- getPTC(DB_source_data, 1)
# build a table with criteria selection as the header
Criteria_Enum <- read.xlsx(paste(prep_file_path,'Criteria_Enum.xlsx',sep=''), sheetName ="ENUM", colIndex=c(1:3,5:6), stringsAsFactors=FALSE, header=TRUE)
################
temp_PTC <- PTC
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
temptemp <- temp_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
# IBC, IIIA (T1-3, N1-2) has error
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
# Stage I is found for Stage II
# test pattern: if end of the string, positive look backward, it is end by letter I
# append the search pattern: (?!I) - negative look ahead, the string is not followed by I
if (grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE)){
search_pattern = paste(test_criteria_selection[k],"(?!I)",sep="")
} else {
search_pattern = test_criteria_selection[k]
}
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
temptemp[new_col] <- lapply(temptemp[test_criteria[j]], function(input) grepl(search_pattern, input, perl=TRUE))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt",sep="")
write.table(temptemp, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
i = 1
j = 1
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
test_criteria
j = 6
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
k = 1
test_criteria_selection[k]
grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE)
search_pattern = paste(test_criteria_selection[k],"(?!I)",sep="")
search_pattern
PTC <- getPTC(DB_source_data, 0)
# build a table with criteria selection as the header
Criteria_Enum <- read.xlsx(paste(prep_file_path,'Criteria_Enum.xlsx',sep=''), sheetName ="ENUM", colIndex=c(1:3,5:6), stringsAsFactors=FALSE, header=TRUE)
################
temp_PTC <- PTC
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
temptemp <- temp_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
# IBC, IIIA (T1-3, N1-2) has error
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
# Stage I is found for Stage II
# test pattern: if end of the string, positive look backward, it is end by letter I
# append the search pattern: (?!I) - negative look ahead, the string is not followed by I
if (grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE)){
search_pattern = paste(test_criteria_selection[k],"(?!I)",sep="")
} else {
search_pattern = test_criteria_selection[k]
}
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
temptemp[new_col] <- lapply(temptemp[test_criteria[j]], function(input) grepl(search_pattern, input, perl=TRUE))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt",sep="")
write.table(temptemp, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
PTC <- getPTC(DB_source_data, 0)
# build a table with criteria selection as the header
Criteria_Enum <- read.xlsx(paste(prep_file_path,'Criteria_Enum.xlsx',sep=''), sheetName ="ENUM", colIndex=c(1:3,5:6), stringsAsFactors=FALSE, header=TRUE)
################
temp_PTC <- PTC
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
temptemp <- temp_PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
# IBC, IIIA (T1-3, N1-2) has error
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
search_pattern = test_criteria_selection[k]
# if the criteria has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
# Stage I is found for Stage II
# test pattern: if end of the string, positive look backward, it is end by letter I
# append the search pattern: (?!I) - negative look ahead, the string is not followed by I
if (grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE)){
search_pattern = paste(test_criteria_selection[k],"(?!I)",sep="")
#            } else {
#                search_pattern = test_criteria_selection[k]
}
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
temptemp[new_col] <- lapply(temptemp[test_criteria[j]], function(input) grepl(search_pattern, input, perl=TRUE))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt",sep="")
write.table(temptemp, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
knit('GetGHIData.Rmd')
PTV <- getPTV(DB_source_data, 1)
View(PTV)
PTV_local <- getPTV(DB_source_data, 0)
Criteria_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="Criteria_ENUM", colIndex=c(1:3,5:6), stringsAsFactors=FALSE, header=TRUE)
PA_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="PA_ENUM", colIndex=c(6), stringsAsFactors=FALSE, header=TRUE)
View(PA_Enum)
View(PA_Enum)
seq_along(length(PA_Enum)
)
seq_along((PA_Enum)
)
seq(1, length(PA_Enum)
)
PA_Enum
nrows(PA_Enum)
nrow(PA_Enum)
seq_along(PA_Enum)
for (i in seq(1, nrow(PA_Enum))) {
print (i)
}
for (i in seq(1, nrow(PA_Enum))) {
search_pattern <- PA_Enum[i]
print (search_pattern)
}
PA_Enum[1]
for (i in seq(1, nrow(PA_Enum))) {
search_pattern <- PA_Enum[i,]
print (search_pattern)
}
rm(PTV_local)
head(PTV$OSM_Prior_Authorization__c)
for (i in seq(1, nrow(PA_Enum))) {
search_pattern <- PA_Enum[i,]
print (search_pattern)
# if the Enum has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
# adding new column of T/F for each PA selection
PTV[PA_Enum[i,]] <- lapply(PTV$OSM_Prior_Authorization__c, function(input) grepl(search_pattern, input, perl=TRUE))
}
View(PTV)
PTV <- getPTV(DB_source_data, 1)
# build a table with criteria selection as the header
PA_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="PA_ENUM", colIndex=c(6), stringsAsFactors=FALSE, header=TRUE)
View(PTV)
PA_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="PA_ENUM", colIndex=c(6), stringsAsFactors=FALSE, header=TRUE)
PA_Enum
length(PA_Enum$Enum)
PA_Enum$Enum[i]
for (i in seq(1, length(PA_Enum$Enum))) {
search_pattern <- PA_Enum$Enum[i]
print (search_pattern)
}
for (i in seq(1, length(PA_Enum$Enum))) {
search_pattern <- PA_Enum$Enum[i]
# if the Enum has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
print (search_pattern)
}
head(PTV$OSM_Prior_Authorization__c)
search_pattern
PTV$OSM_Prior_Authorization__c[2]
gprel(search_pattern, PTV$OSM_Prior_Authorization__c[2])
grepl(search_pattern, PTV$OSM_Prior_Authorization__c[2])
i<-1
search_pattern <- PA_Enum$Enum[i]
search_pattern
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
search_pattern
grepl(search_pattern, PTV$OSM_Prior_Authorization__c[2])
View(PTV)
grepl(search_pattern, PTV$OSM_Prior_Authorization__c[4])
for (i in seq(1, length(PA_Enum$Enum))) {
search_pattern <- PA_Enum$Enum[i]
# if the Enum has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
#print (search_pattern)
# adding new column of T/F for each PA selection
PTV[PA_Enum$Enum[i]] <- lapply(PTV$OSM_Prior_Authorization__c, function(input) grepl(search_pattern, input, perl=TRUE))
}
View(PTV)
search_pattern
PA_Enum$Enum[i]
PTV <- getPTV(DB_source_data, 1)
head(PTV)
head(PTV[OSM_Prior_Authorization__c])
head(PTV['OSM_Prior_Authorization__c'])
PA_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="PA_ENUM", colIndex=c(6), stringsAsFactors=FALSE, header=TRUE)
#iternate every option of Prior Authorization field, flatten the column
for (i in seq(1, length(PA_Enum$Enum))) {
search_pattern <- PA_Enum$Enum[i]
# if the Enum has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
#print (search_pattern)
# adding new column of T/F for each PA selection
PTV[PA_Enum$Enum[i]] <- lapply(PTV['OSM_Prior_Authorization__c'], function(input) grepl(search_pattern, input, perl=TRUE))
}
View(PTV)
target <- "PTV_Summary.txt"
write.table(PTV, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
rm(temptemp)
rm(temp_PTC)
rm(temp_gender)
PTC <- getPTC(DB_source_data, 0)
PTC <- getPTC(DB_source_data, 1)
# build a table with criteria selection as the header
Criteria_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="Criteria_ENUM", colIndex=c(1:3,5:6), stringsAsFactors=FALSE, header=TRUE)
################
unique_test <- unique(Criteria_Enum$Test)
for (i in seq(1, length(unique_test))) {
test_criteria <- unique(Criteria_Enum[Criteria_Enum$Test==unique_test[i],'SFDC_API_Name'])
test_PTC <- PTC %>%
dplyr::filter(Test == unique_test[i]) %>%
select(c(names(PTC)[1:14],test_criteria))
for (j in seq(1, length(test_criteria))) {
test_criteria_selection <- unique(Criteria_Enum[(Criteria_Enum$Test == unique_test[i] &
Criteria_Enum$SFDC_API_Name==test_criteria[j]),'Criteria_Enum'])
for (k in seq(1, length(test_criteria_selection))){
#print(test_criteria_selection[k])
search_pattern = test_criteria_selection[k]
# if the criteria has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
# Stage I is found for Stage II
# test pattern: if end of the string, positive look backward, it is end by letter I
# append the search pattern: (?!I) - negative look ahead, the string is not followed by I
if (grepl("$(?<=I)",test_criteria_selection[k], perl=TRUE)){
search_pattern = paste(test_criteria_selection[k],"(?!I)",sep="")
}
new_col = paste(test_criteria[j],"=",test_criteria_selection[k])
test_PTC[new_col] <- lapply(test_PTC[test_criteria[j]], function(input) grepl(search_pattern, input, perl=TRUE))
}
}
target <- paste(unique_test[i],"_PTC_Summary.txt",sep="")
write.table(test_PTC, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
}
PTC <- getPTC(DB_source_data, 0)
PTV <- getPTV(DB_source_data, 1)
# build a table with criteria selection as the header
PA_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="PA_ENUM", colIndex=c(6), stringsAsFactors=FALSE, header=TRUE)
#iternate every option of Prior Authorization field, flatten the column
for (i in seq(1, length(PA_Enum$Enum))) {
search_pattern <- PA_Enum$Enum[i]
# if the Enum has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
#print (search_pattern)
# adding new column of T/F for each PA selection
PTV[PA_Enum$Enum[i]] <- lapply(PTV['OSM_Prior_Authorization__c'], function(input) grepl(search_pattern, input, perl=TRUE))
# PTV$Column is different from PTV['Column']
}
target <- "PTV_Summary.txt"
write.table(PTV, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
PTV <- getPTV(DB_source_data, 0)
PTV <- getPTV(DB_source_data, 1)
# build a table with criteria selection as the header
PA_Enum <- read.xlsx(paste(prep_file_path,'Enum.xlsx',sep=''), sheetName ="PA_ENUM", colIndex=c(6), stringsAsFactors=FALSE, header=TRUE)
#iternate every option of Prior Authorization field, flatten the column
for (i in seq(1, length(PA_Enum$Enum))) {
search_pattern <- PA_Enum$Enum[i]
# if the Enum has (), need to prefixes with \ to include the () in search
search_pattern <- sub("\\(", "\\\\(", search_pattern)
search_pattern <- sub("\\)", "\\\\)", search_pattern)
#print (search_pattern)
# adding new column of T/F for each PA selection
PTV[PA_Enum$Enum[i]] <- lapply(PTV['OSM_Prior_Authorization__c'], function(input) grepl(search_pattern, input, perl=TRUE))
# PTV$Column is different from PTV['Column']
}
target <- "PTV_Summary.txt"
write.table(PTV, paste(DB_source_data,target,sep=''), sep="|",row.names=FALSE, qmethod = "double", na="")
rm(list=ls())
